/**
 * i18n provider component for Next.js App Router
 * Wraps the application with the i18n context for translations
 *
 * Generated by Copilot
 */

"use client";

import { PropsWithChildren, useEffect, useState } from "react";
import { I18nextProvider } from "react-i18next";
import i18nClient, {
  changeLanguage,
  getBrowserLanguage,
} from "@/lib/i18n/client";
import { getDefaultLanguage, isLanguageSupported } from "@/lib/i18n/settings";

/**
 * Props for the I18nProvider component
 */
interface I18nProviderProps extends PropsWithChildren {
  /**
   * Initial language code to use, detected from server or cookies
   */
  initialLang?: string;
}

/**
 * Provider component to wrap the application with i18n context
 * Makes translations available to all child components
 */
export default function I18nProvider({
  children,
  initialLang = getDefaultLanguage(),
}: I18nProviderProps) {
  const [isInitialized, setIsInitialized] = useState(false);

  // Initialize or update the language when the provider mounts or initialLang changes
  useEffect(() => {
    const initializeLanguage = async () => {
      try {
        // First check if there's a stored preference
        const storedLang =
          typeof window !== "undefined"
            ? localStorage.getItem("i18nextLng") ||
              document.cookie.match(/i18next=([^;]+)/)?.[1]
            : null;

        if (storedLang && isLanguageSupported(storedLang)) {
          // Use stored preference if available and supported
          if (i18nClient.language !== storedLang) {
            await changeLanguage(storedLang);
          }
        } else if (initialLang !== i18nClient.language) {
          // If no stored preference, use the initialLang (from server)
          await changeLanguage(initialLang);

          // If initialLang is the default, try browser detection as a better option
          if (initialLang === getDefaultLanguage()) {
            const browserLang = getBrowserLanguage();
            if (browserLang && browserLang !== initialLang) {
              await changeLanguage(browserLang);
            }
          }
        }
      } catch (error) {
        console.error("Failed to initialize language:", error);
      } finally {
        setIsInitialized(true);
      }
    };

    initializeLanguage();
  }, [initialLang]);

  // Don't render children until i18n is initialized to prevent flash of untranslated content
  if (!isInitialized && typeof window !== "undefined") {
    return null; // Or a loading indicator if preferred
  }

  return <I18nextProvider i18n={i18nClient}>{children}</I18nextProvider>;
}
