/**
 * i18n provider component for Next.js App Router
 * Wraps the application with the i18n context for translations
 *
 * Generated by Copilot
 */

"use client";

import { PropsWithChildren, useEffect } from "react";
import { I18nextProvider } from "react-i18next";
import i18nClient, {
  changeLanguage,
  getBrowserLanguage,
} from "@/lib/i18n/client";
import { getDefaultLanguage, isLanguageSupported } from "@/lib/i18n/settings";
import { getLanguagePreference } from "@/lib/i18n/storage";

/**
 * Props for the I18nProvider component
 */
interface I18nProviderProps extends PropsWithChildren {
  /**
   * Initial language code to use, detected from server or cookies
   */
  initialLang?: string;
}

/**
 * Provider component to wrap the application with i18n context
 * Makes translations available to all child components
 */
export default function I18nProvider({
  children,
  initialLang = getDefaultLanguage(),
}: I18nProviderProps) {
  // Always render the children with the provider to avoid hydration mismatches
  // Then initialize or update the language in a useEffect
  useEffect(() => {
    const initializeLanguage = async () => {
      try {
        // First load - use initialLang to prevent hydration mismatch
        if (i18nClient.language !== initialLang) {
          // Just change the language without saving to storage at this point
          // This keeps the initial server-rendered content matching
          await i18nClient.changeLanguage(initialLang);
        }

        // After hydration - check user's actual preference
        setTimeout(async () => {
          // Use our updated getLanguagePreference which checks both cookie and localStorage
          const storedLang = getLanguagePreference();
          
          if (storedLang && isLanguageSupported(storedLang)) {
            // Use stored preference if available and supported
            if (i18nClient.language !== storedLang) {
              await changeLanguage(storedLang);
            }
          } else if (initialLang === getDefaultLanguage()) {
            // If initialLang is the default and no stored preference, try browser detection
            const browserLang = getBrowserLanguage();
            if (browserLang && isLanguageSupported(browserLang) && browserLang !== i18nClient.language) {
              await changeLanguage(browserLang);
            }
          }
        }, 10); // Slightly increased timeout to ensure full hydration is complete
      } catch (error) {
        console.error("Failed to initialize language:", error);
      }
    };

    // Only run in the browser
    if (typeof window !== "undefined") {
      initializeLanguage();
    }
  }, [initialLang]);

  return <I18nextProvider i18n={i18nClient}>{children}</I18nextProvider>;
}
