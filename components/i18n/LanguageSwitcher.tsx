/**
 * Language Switcher Component
 * Allows users to switch between supported languages
 *
 * Generated by Copilot
 */

"use client";

import { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { LANGUAGES, getLanguageByCode } from "@/lib/i18n/settings";
import { changeLanguage } from "@/lib/i18n/client";

/**
 * Props for the LanguageSwitcher component
 */
interface LanguageSwitcherProps {
  /**
   * Optional variant for the language switcher
   * 'simple': Just shows the toggle button with flags
   * 'full': Shows a dropdown with language names and flags
   * Default: 'simple'
   */
  variant?: "simple" | "full";
}

/**
 * Language Switcher component that allows users to toggle between supported languages
 * For now, this is a simple toggle between English and French
 */
export default function LanguageSwitcher({
  variant = "simple",
}: LanguageSwitcherProps) {
  const { i18n, t } = useTranslation();
  const [currentLang, setCurrentLang] = useState<string>(i18n.language || "en");
  // Move isClient state to the top level instead of inside the conditional
  const [isClient, setIsClient] = useState(false);
  
  // Current language object based on the selected language code
  const currentLanguage = getLanguageByCode(currentLang) || LANGUAGES[0];
  const defaultLanguage = LANGUAGES[0];

  // Update component state when i18n language changes
  useEffect(() => {
    if (i18n.language && i18n.language !== currentLang) {
      setCurrentLang(i18n.language);
    }
  }, [i18n.language, currentLang]);
  
  // Use effect to update the client state after hydration
  useEffect(() => {
    setIsClient(true);
  }, []);

  /**
   * Toggle between available languages
   * Currently toggles between English and French
   */
  const toggleLanguage = async () => {
    try {
      // Get the next language to switch to (cycling through LANGUAGES array)
      const currentIndex = LANGUAGES.findIndex(
        (lang) => lang.code === currentLang
      );
      const nextIndex = (currentIndex + 1) % LANGUAGES.length;
      const nextLang = LANGUAGES[nextIndex].code;

      // Change language
      await changeLanguage(nextLang);
      setCurrentLang(nextLang);

      // Save language preference to localStorage and cookies for better persistence
      localStorage.setItem("i18nextLng", nextLang);
      document.cookie = `i18next=${nextLang}; path=/; max-age=${60*60*24*30}; SameSite=Strict`; // 30 days expiry

      // Update HTML lang attribute
      if (typeof document !== "undefined") {
        document.documentElement.lang = nextLang;
      }
    } catch (error) {
      console.error("Failed to change language:", error);
    }
  };
  
  // Simple variant (just a toggle button with flags)
  if (variant === "simple") {
    return (
      <Button
        variant="ghost"
        size="sm"
        onClick={toggleLanguage}
        aria-label="Select Language"
        className="px-2 w-12 flex justify-center"
      >
        <span className="text-lg" aria-hidden="true">
          {isClient ? currentLanguage.flag : defaultLanguage.flag}
        </span>
      </Button>
    );
  }

  // Full variant with language names
  return (
    <div className="flex flex-col space-y-2">
      <p className="text-sm font-medium mb-1">
        {t("language.title", "Language")}
      </p>
      <div className="flex flex-row space-x-2">
        {LANGUAGES.map((language) => (
          <Button
            key={language.code}
            variant={currentLang === language.code ? "default" : "outline"}
            size="sm"
            onClick={() => changeLanguage(language.code)}
            className="flex items-center space-x-2"
          >
            <span className="mr-2" aria-hidden="true">
              {language.flag}
            </span>
            <span>{t(`language.${language.code}`, language.name)}</span>
          </Button>
        ))}
      </div>
    </div>
  );
}
