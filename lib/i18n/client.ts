/**
 * Client-side i18n configuration
 * This module initializes i18next for client components
 *
 * Generated by Copilot
 */

"use client";

import i18next from "i18next";
import { initReactI18next } from "react-i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import HttpBackend from "i18next-http-backend";
import {
  DEFAULT_NAMESPACE,
  ALL_NAMESPACES,
  CACHE_EXPIRATION_DAYS,
  getDefaultLanguage,
  getSupportedLanguages,
  isLanguageSupported,
} from "./settings";
import { saveLanguagePreference, getLanguagePreference } from "./storage";

/**
 * Type declaration for navigator language properties
 */
interface ExtendedNavigator extends Navigator {
  userLanguage?: string;
  browserLanguage?: string;
}

/**
 * Get the best matching language from browser settings
 * Filters navigator languages to find the first supported language
 *
 * @returns The best matching supported language code or null if none found
 */
export const getBrowserLanguage = (): string | null => {
  if (typeof window === "undefined" || !window.navigator) {
    return null;
  }

  // Get browser languages
  const extendedNavigator = window.navigator as ExtendedNavigator;
  const browserLanguages: readonly string[] = extendedNavigator.languages || [
    extendedNavigator.language ||
      extendedNavigator.userLanguage ||
      extendedNavigator.browserLanguage,
  ];

  // Find the first supported language
  for (const lang of browserLanguages) {
    // Extract the language code (en-US -> en)
    const langCode = lang.split("-")[0].toLowerCase();

    if (isLanguageSupported(langCode)) {
      return langCode;
    }
  }

  return null;
};

// Initialize client-side i18next instance
const i18nClient = i18next
  .createInstance({
    debug: process.env.NODE_ENV === "development",
    fallbackLng: getDefaultLanguage(),
    supportedLngs: getSupportedLanguages(),
    defaultNS: DEFAULT_NAMESPACE,
    fallbackNS: DEFAULT_NAMESPACE,
    ns: ALL_NAMESPACES,
    interpolation: {
      escapeValue: false, // React already escapes by default
    },
    // Config for detecting user language preference in browser
    detection: {
      // Order of detection:
      // 1. Previously stored preference in cookie
      // 2. Previously stored preference in localStorage
      // 3. Browser language setting
      // 4. HTML tag lang attribute
      // 5. Default language
      order: ["cookie", "localStorage", "navigator", "htmlTag", "path"],
      lookupCookie: "i18next",
      lookupLocalStorage: "i18nextLng",
      lookupFromPathIndex: 0,
      lookupFromSubdomainIndex: 0,
      // Cache expiration
      caches: ["localStorage", "cookie"],
      cookieOptions: {
        expires: new Date(
          Date.now() + CACHE_EXPIRATION_DAYS * 24 * 60 * 60 * 1000
        ), // Convert days to milliseconds
        secure: process.env.NODE_ENV === "production",
        domain: typeof window !== "undefined" ? window.location.hostname : "",
      },
      htmlTag:
        typeof document !== "undefined" ? document.documentElement : undefined,
    },
    // Resource loading options
    react: {
      useSuspense: true,
    },
  })
  .use(HttpBackend) // Load translations via http
  .use(LanguageDetector) // Detect user language
  .use(initReactI18next); // Initialize react-i18next

// Initialize the i18n instance
i18nClient.init({
  backend: {
    loadPath: "/locales/{{lng}}/{{ns}}.json",
  },
});

/**
 * Apply browser language detection on initial load
 * Runs once after initialization to ensure browser language is considered
 */
const applyBrowserLanguageDetection = () => {
  // Only run in browser environment
  if (typeof window !== "undefined") {
    try {
      // Check for stored preferences first using our storage utility
      const storedLang = getLanguagePreference();

      if (!storedLang) {
        // If no stored preference, try browser language
        const detectedLang = getBrowserLanguage();

        if (detectedLang && i18nClient.language !== detectedLang) {
          // Change language and save preference
          i18nClient.changeLanguage(detectedLang).catch((error) => {
            console.error("Failed to set detected browser language:", error);
          });
        }
      }
    } catch (error) {
      console.error("Error during language detection:", error);
    }
  }
};

// Apply browser language detection after initialization
if (typeof window !== "undefined") {
  // Wait for next tick to ensure i18n is fully initialized
  setTimeout(applyBrowserLanguageDetection, 0);
}

/**
 * Get the current i18n instance
 */
export default i18nClient;

/**
 * Change the current language
 *
 * @param lng - Language code to switch to
 * @returns Promise resolving when language is changed
 */
export const changeLanguage = (lng: string) => {
  if (isLanguageSupported(lng)) {
    // Save the language preference to localStorage
    saveLanguagePreference(lng);

    // Update the HTML lang attribute for accessibility
    if (typeof document !== "undefined") {
      document.documentElement.lang = lng;
    }

    // Change the language in i18next
    return i18nClient.changeLanguage(lng);
  }

  console.warn(`Language '${lng}' is not supported`);
  return Promise.resolve();
};
