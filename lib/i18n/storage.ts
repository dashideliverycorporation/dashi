/**
 * i18n storage utilities for persisting language preferences
 *
 * Generated by Copilot
 */

"use client";

import { isLanguageSupported, getDefaultLanguage } from "./settings";

// Local storage keys
const LANGUAGE_PREFERENCE_KEY = "i18nextLng";

/**
 * Save the user's language preference to local storage and cookies
 *
 * @param languageCode - The language code to save (e.g., 'en', 'fr')
 * @returns True if successfully saved, false otherwise
 */
export function saveLanguagePreference(languageCode: string): boolean {
  if (typeof window === "undefined") {
    return false;
  }

  try {
    // Only save supported languages
    if (isLanguageSupported(languageCode)) {
      // Save to localStorage
      localStorage.setItem(LANGUAGE_PREFERENCE_KEY, languageCode);
      
      // Save to cookies for SSR persistence (30 days expiry)
      document.cookie = `i18next=${languageCode}; path=/; max-age=${60*60*24*30}; SameSite=Strict`;
      
      return true;
    }
    return false;
  } catch (error) {
    console.error("Failed to save language preference:", error);
    return false;
  }
}

/**
 * Retrieve the user's language preference from local storage or cookies
 *
 * @returns The saved language code or null if not found
 */
export function getLanguagePreference(): string | null {
  if (typeof window === "undefined") {
    return null;
  }

  try {
    // First check cookies (higher priority for SSR consistency)
    const cookieMatch = document.cookie.match(/i18next=([^;]+)/);
    const cookieLang = cookieMatch ? cookieMatch[1] : null;
    
    // Then check localStorage
    const localStorageLang = localStorage.getItem(LANGUAGE_PREFERENCE_KEY);
    
    // Use the first valid language found
    const languageCode = cookieLang || localStorageLang;

    // Validate the stored language is still supported
    if (languageCode && isLanguageSupported(languageCode)) {
      // Ensure both storage mechanisms have the same value
      if (cookieLang && !localStorageLang) {
        localStorage.setItem(LANGUAGE_PREFERENCE_KEY, cookieLang);
      } else if (!cookieLang && localStorageLang) {
        document.cookie = `i18next=${localStorageLang}; path=/; max-age=${60*60*24*30}; SameSite=Strict`;
      }
      
      return languageCode;
    }

    return null;
  } catch (error) {
    console.error("Failed to retrieve language preference:", error);
    return null;
  }
}

/**
 * Clear the user's language preference from local storage and cookies
 *
 * @returns True if successfully cleared, false otherwise
 */
export function clearLanguagePreference(): boolean {
  if (typeof window === "undefined") {
    return false;
  }

  try {
    // Clear from localStorage
    localStorage.removeItem(LANGUAGE_PREFERENCE_KEY);
    
    // Clear from cookies (set expired date)
    document.cookie = "i18next=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Strict";
    
    return true;
  } catch (error) {
    console.error("Failed to clear language preference:", error);
    return false;
  }
}

/**
 * Get the effective language to use
 * Checks local storage first, then falls back to default language
 *
 * @returns The language code to use
 */
export function getEffectiveLanguage(): string {
  return getLanguagePreference() || getDefaultLanguage();
}
