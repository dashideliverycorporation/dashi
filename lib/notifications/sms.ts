/**
 * SMS notification service for Dashi platform using Textbelt
 * 
 * This module provides helper functions for sending SMS notifications
 * to restaurant owners when new orders are placed
 * 
 * Generated by GitHub Copilot
 */

/**
 * SMS recipient type definition
 */
export interface SMSRecipient {
  phoneNumber: string; // Phone number with country code (e.g., +123456789)
}

/**
 * SMS message configuration interface
 */
export interface SMSMessageConfig {
  to: SMSRecipient;
  message: string;
}

/**
 * SMS service result interface
 */
export interface SMSResult {
  success: boolean;
  messageId?: string;
  error?: string;
  quotaRemaining?: number;
  textId?: string;
}

/**
 * Check if SMS service is properly configured
 * @returns boolean indicating if service is ready
 */
export const isSMSServiceConfigured = (): boolean => {
  try {
    // Check for required environment variables
    const apiKey = process.env.TEXTBELT_API_KEY;
    return Boolean(apiKey);
  } catch {
    return false;
  }
};

/**
 * Format phone number to ensure it's properly formatted for Textbelt
 * @param phoneNumber The phone number to format
 * @returns Formatted phone number
 */
export const formatPhoneNumber = (phoneNumber: string): string => {
  // Remove any non-digit characters except + at beginning
  let cleaned = phoneNumber.replace(/^\+/, '');
  cleaned = cleaned.replace(/\D/g, '');
  
  return cleaned;
};

/**
 * Send an SMS message using Textbelt API
 * @param config SMS message configuration
 * @returns Promise with SMS result
 */
export const sendSMSMessage = async (config: SMSMessageConfig): Promise<SMSResult> => {
  try {
    // Validate configuration first
    if (!config.to.phoneNumber) {
      throw new Error('Recipient phone number is required');
    }
    
    if (!config.message?.trim()) {
      throw new Error('Message content cannot be empty');
    }
    
    // Check if SMS service is configured
    if (!isSMSServiceConfigured()) {
      console.warn('SMS service is not configured. Message will not be sent.');
      return {
        success: false,
        error: 'SMS service not configured',
      };
    }
    
    // Format the phone number
    const formattedPhoneNumber = formatPhoneNumber(config.to.phoneNumber);
    
    // Get API key from environment
    const apiKey = process.env.TEXTBELT_API_KEY || '';
    
    // Call Textbelt API
    const response = await fetch('https://textbelt.com/text', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        phone: formattedPhoneNumber,
        message: config.message,
        key: apiKey,
      }).toString(),
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    
    const result = await response.json();
    
    if (!result.success) {
      return {
        success: false,
        error: result.error || 'Failed to send SMS',
        quotaRemaining: result.quotaRemaining,
      };
    }
    
    return {
      success: true,
      messageId: result.textId,
      quotaRemaining: result.quotaRemaining,
      textId: result.textId,
    };
  } catch (error) {
    console.error('SMS sending failed with exception:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
};

/**
 * Send a test SMS message to verify configuration
 * @param phoneNumber Recipient phone number
 * @returns Promise with SMS result
 */
export const sendTestSMSMessage = async (phoneNumber: string): Promise<SMSResult> => {
  return sendSMSMessage({
    to: { phoneNumber },
    message: "This is a test message from the Dashi platform. If you received this, the SMS notification service is working correctly."
  });
};

/**
 * Creates an SMS message for a new order notification
 * @param orderData Order data for notification
 * @returns Formatted message string
 */
export const createOrderNotificationSMS = (orderData: {
  orderNumber: string;
  customerName: string;
  restaurantName: string;
  totalAmount: number;
  deliveryAddress: string;
}): string => {
  return `NEW ORDER ALERT!
Order: ${orderData.orderNumber}
Customer: ${orderData.customerName}
Restaurant: ${orderData.restaurantName}
Total: $${orderData.totalAmount.toFixed(2)}
Delivery: ${orderData.deliveryAddress}

Please log in to your dashboard to process this order.
`;
};
