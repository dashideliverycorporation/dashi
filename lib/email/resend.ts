/**
 * Resend email service configuration and helper functions
 * This module provides type-safe helpers for sending emails using Resend
 *
 * Generated by Copilot
 */

import { Resend } from "resend";

/**
 * Email recipient type definition
 */
export interface EmailRecipient {
  email: string;
  name?: string;
}

/**
 * Base email configuration interface
 */
export interface EmailConfig {
  from: EmailRecipient;
  to: EmailRecipient | EmailRecipient[];
  subject: string;
  cc?: EmailRecipient | EmailRecipient[];
  bcc?: EmailRecipient | EmailRecipient[];
  replyTo?: string;
}

/**
 * Text-based email configuration
 */
export interface TextEmailConfig extends EmailConfig {
  text: string;
}

/**
 * HTML-based email configuration
 */
export interface HtmlEmailConfig extends EmailConfig {
  html: string;
}

/**
 * Combined email configuration type
 */
export type SendEmailConfig = TextEmailConfig | HtmlEmailConfig;

/**
 * Email sending result interface
 */
export interface EmailResult {
  success: boolean;
  id?: string;
  error?: Error;
}

/**
 * Creates a Resend client instance using the API key from environment variables
 */
export const createResendClient = (): Resend => {
  const apiKey = process.env.RESEND_API_KEY;

  if (!apiKey) {
    throw new Error("RESEND_API_KEY environment variable is not set");
  }

  return new Resend(apiKey);
};

/**
 * Main helper function to send an email using Resend
 *
 * @param config - Email configuration including recipients, subject, and content
 * @returns EmailResult with success status and either ID or error
 */
export const sendEmail = async (
  config: SendEmailConfig
): Promise<EmailResult> => {
  try {
    const resend = createResendClient();

    // Convert recipient format if necessary
    const to = Array.isArray(config.to)
      ? config.to.map((r) => (r.name ? `${r.name} <${r.email}>` : r.email))
      : config.to.name
      ? `${config.to.name} <${config.to.email}>`
      : config.to.email;

    // Convert cc and bcc if provided
    const cc = config.cc
      ? Array.isArray(config.cc)
        ? config.cc.map((r) => (r.name ? `${r.name} <${r.email}>` : r.email))
        : config.cc.name
        ? `${config.cc.name} <${config.cc.email}>`
        : config.cc.email
      : undefined;

    const bcc = config.bcc
      ? Array.isArray(config.bcc)
        ? config.bcc.map((r) => (r.name ? `${r.name} <${r.email}>` : r.email))
        : config.bcc.name
        ? `${config.bcc.name} <${config.bcc.email}>`
        : config.bcc.email
      : undefined;

    // Prepare from field
    const from = config.from.name
      ? `${config.from.name} <${config.from.email}>`
      : config.from.email;

    // Determine if we're sending text or HTML email
    const emailData = {
      from,
      to,
      subject: config.subject,
      cc,
      bcc,
      reply_to: config.replyTo,
      ...("html" in config ? { html: config.html } : { text: config.text }),
    };

    const { data, error } = await resend.emails.send(emailData);

    if (error) {
      console.error("Failed to send email:", error);
      return {
        success: false,
        error: new Error(error.message),
      };
    }

    return {
      success: true,
      id: data?.id,
    };
  } catch (error) {
    console.error("Email sending failed with exception:", error);
    return {
      success: false,
      error: error instanceof Error ? error : new Error(String(error)),
    };
  }
};

/**
 * Simplified helper for sending plain text emails
 *
 * @param to - Recipient email address or object with name and email
 * @param subject - Email subject line
 * @param text - Plain text email content
 * @param from - Optional sender (defaults to configured default sender)
 * @returns Email sending result
 */
export const sendTextEmail = async (
  to: EmailRecipient | EmailRecipient[],
  subject: string,
  text: string,
  from?: EmailRecipient
): Promise<EmailResult> => {
  const defaultFrom: EmailRecipient = {
    email: process.env.DEFAULT_FROM_EMAIL || "noreply@dashi.app",
    name: process.env.DEFAULT_FROM_NAME || "Dashi",
  };

  return sendEmail({
    from: from || defaultFrom,
    to,
    subject,
    text,
  });
};

/**
 * Simplified helper for sending HTML emails
 *
 * @param to - Recipient email address or object with name and email
 * @param subject - Email subject line
 * @param html - HTML email content
 * @param from - Optional sender (defaults to configured default sender)
 * @returns Email sending result
 */
export const sendHtmlEmail = async (
  to: EmailRecipient | EmailRecipient[],
  subject: string,
  html: string,
  from?: EmailRecipient
): Promise<EmailResult> => {
  const defaultFrom: EmailRecipient = {
    email: process.env.DEFAULT_FROM_EMAIL || "noreply@dashi.app",
    name: process.env.DEFAULT_FROM_NAME || "Dashi",
  };

  return sendEmail({
    from: from || defaultFrom,
    to,
    subject,
    html,
  });
};
