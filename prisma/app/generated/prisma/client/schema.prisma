// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "app/generated/prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  CUSTOMER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  NEW
  PREPARING
  READY_FOR_PICKUP_DELIVERY
  COMPLETED
  CANCELLED
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core entities
model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  password          String? // Hashed password (now optional because OAuth providers don't use it)
  role              UserRole
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  emailVerified     DateTime?
  image             String? // User profile image (often provided by OAuth)
  // Relations
  customer          Customer?
  restaurantManager RestaurantManager?
  accounts          Account[]
  sessions          Session[]
}

model Customer {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber String
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  orders      Order[]
}

model RestaurantManager {
  id           String     @id @default(cuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber  String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Restrict)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model Restaurant {
  id              String              @id @default(cuid())
  name            String
  description     String?
  email           String?
  phoneNumber     String
  address         String?
  serviceArea     String?
  imageUrl        String // URL to the restaurant's primary image
  category        String // Type of cuisine or restaurant category
  preparationTime String // Average food preparation time (e.g., "30-45 minutes")
  deliveryFee     Decimal             @default(0.00) @db.Decimal(10, 2) // Fee charged for delivery service
  rating          Float               @default(0.0) // Average customer rating (0.0-5.0)
  ratingCount     Int                 @default(0) // Total number of customer ratings
  isActive        Boolean             @default(true)
  deletedAt       DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  // Relations
  menuItems       MenuItem[]
  orders          Order[]
  managers        RestaurantManager[]
}

model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Decimal     @db.Decimal(10, 2)
  category     String
  imageUrl     String
  isAvailable  Boolean     @default(true)
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  // Relations
  orderItems   OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  status          OrderStatus @default(NEW)
  totalAmount     Decimal     @db.Decimal(10, 2)
  deliveryAddress String?
  customerNotes   String?
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  restaurantId    String
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  // Relations
  orderItems      OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
