// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  CUSTOMER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  NEW
  PREPARING
  READY_FOR_PICKUP_DELIVERY
  COMPLETED
  CANCELLED
}

// Core entities
model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String?
  password          String // Hashed password
  role              UserRole
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  // Relations
  customer          Customer?
  restaurantManager RestaurantManager?
}

model Customer {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber  String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relations
  orders       Order[]
}

model RestaurantManager {
  id           String     @id @default(cuid())
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Restaurant {
  id          String    @id @default(cuid())
  name        String
  description String?
  email       String
  phoneNumber String?
  address     String?
  isActive    Boolean   @default(true)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relations
  menuItems   MenuItem[]
  orders      Order[]
  managers    RestaurantManager[]
}

model MenuItem {
  id           String    @id @default(cuid())
  name         String
  description  String?
  price        Decimal   @db.Decimal(10, 2)
  category     String
  isAvailable  Boolean   @default(true)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // Relations
  orderItems   OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  status          OrderStatus @default(NEW)
  totalAmount     Decimal     @db.Decimal(10, 2)
  deliveryAddress String?
  customerNotes   String?
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  restaurantId    String
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  // Relations
  orderItems      OrderItem[]
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
