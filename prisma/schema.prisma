generator client {
  provider      = "prisma-client-js"
  output        = "app/generated/prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  password          String?
  role              UserRole
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  customer          Customer?
  restaurantManager RestaurantManager?
  sessions          Session[]
}

model Customer {
  id          String   @id @default(cuid())
  userId      String   @unique
  phoneNumber String
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
}

model RestaurantManager {
  id           String     @id @default(cuid())
  userId       String     @unique
  phoneNumber  String
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([restaurantId])
}

model Restaurant {
  id              String              @id @default(cuid())
  name            String
  description     String?
  email           String?
  phoneNumber     String
  address         String?
  serviceArea     String?
  imageUrl        String
  category        String
  preparationTime String
  deliveryFee     Decimal             @default(0.00) @db.Decimal(10, 2)
  discountTag     String?
  rating          Float               @default(0.0)
  ratingCount     Int                 @default(0)
  isActive        Boolean             @default(true)
  deletedAt       DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  menuItems       MenuItem[]
  orders          Order[]
  managers        RestaurantManager[]
}

model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Decimal     @db.Decimal(10, 2)
  category     String
  imageUrl     String
  isAvailable  Boolean     @default(true)
  restaurantId String
  deletedAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model Order {
  id                 String              @id @default(cuid())
  orderNumber        Int?
  displayOrderNumber String              @unique
  status             OrderStatus         @default(PLACED)
  totalAmount        Decimal             @db.Decimal(10, 2)
  deliveryAddress    String?
  customerNotes      String?
  cancellationReason String?
  customerId         String
  restaurantId       String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  customer           Customer            @relation(fields: [customerId], references: [id])
  restaurant         Restaurant          @relation(fields: [restaurantId], references: [id])
  orderItems         OrderItem[]
  paymentTransaction PaymentTransaction?

  @@index([displayOrderNumber])
}

model PaymentTransaction {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  mobileNumber  String?
  providerName  String?
  notes         String?
  customerId    String
  restaurantId  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([customerId])
  @@index([restaurantId])
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  orderId    String
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CUSTOMER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  PLACED
  PREPARING
  DISPATCHED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  MOBILE_MONEY
  CARD
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
